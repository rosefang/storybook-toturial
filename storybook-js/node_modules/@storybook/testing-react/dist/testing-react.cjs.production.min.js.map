{"version":3,"file":"testing-react.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { defaultDecorateStory, combineParameters } from '@storybook/client-api';\nimport addons, { mockChannel } from '@storybook/addons';\nimport type { Meta, Story, StoryContext } from '@storybook/react';\n\nimport type { GlobalConfig, StoriesWithPartialProps } from './types';\n\n// Some addons use the channel api to communicate between manager/preview, and this is a client only feature, therefore we must mock it.\naddons.setChannel(mockChannel());\n\nlet globalStorybookConfig = {};\n\n/** Function that sets the globalConfig of your storybook. The global config is the preview module of your .storybook folder.\n *\n * It should be run a single time, so that your global config (e.g. decorators) is applied to your stories when using `composeStories` or `composeStory`.\n *\n * Example:\n *```jsx\n * // setup.js (for jest)\n * import { setGlobalConfig } from '@storybook/testing-react';\n * import * as globalStorybookConfig from './.storybook/preview';\n *\n * setGlobalConfig(globalStorybookConfig);\n *```\n *\n * @param config - e.g. (import * as globalConfig from '../.storybook/preview')\n */\nexport function setGlobalConfig(config: GlobalConfig) {\n  globalStorybookConfig = config;\n}\n\n/**\n * Function that will receive a story along with meta (e.g. a default export from a .stories file)\n * and optionally a globalConfig e.g. (import * from '../.storybook/preview)\n * and will return a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing a story in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStory } from '@storybook/testing-react';\n * import Meta, { Primary as PrimaryStory } from './Button.stories';\n *\n * const Primary = composeStory(PrimaryStory, Meta);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param story\n * @param meta - e.g. (import Meta from './Button.stories')\n * @param [globalConfig] - e.g. (import * as globalConfig from '../.storybook/preview') this can be applied automatically if you use `setGlobalConfig` in your setup files.\n */\nexport function composeStory<GenericArgs>(\n  story: Story<GenericArgs>,\n  meta: Meta,\n  globalConfig: GlobalConfig = globalStorybookConfig\n) {\n  if (typeof story !== 'function') {\n    throw new Error(\n      `Cannot compose story due to invalid format. @storybook/testing-react expected a function but received ${typeof story} instead.`\n    );\n  }\n\n  if((story as any).story !== undefined) {\n    throw new Error(\n      `StoryFn.story object-style annotation is not supported. @storybook/testing-react expects hoisted CSF stories.\n       https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#hoisted-csf-annotations`\n    );\n  }\n\n  const finalStoryFn = (context: StoryContext) => {\n    const { passArgsFirst = true } = context.parameters;\n    if (!passArgsFirst) {\n      throw new Error(\n        'composeStory does not support legacy style stories (with passArgsFirst = false).'\n      );\n    }\n    return story(context.args as GenericArgs, context);\n  };\n\n  const combinedDecorators = [\n    ...(story.decorators || []),\n    ...(meta?.decorators || []),\n    ...(globalConfig?.decorators || []),\n  ];\n\n  const decorated = defaultDecorateStory(\n    finalStoryFn as any,\n    combinedDecorators as any\n  );\n\n  const defaultGlobals = Object.entries(\n    (globalConfig.globalTypes || {}) as Record<string, { defaultValue: any }>\n  ).reduce((acc, [arg, { defaultValue }]) => {\n    if (defaultValue) {\n      acc[arg] = defaultValue;\n    }\n    return acc;\n  }, {} as Record<string, { defaultValue: any }>);\n\n  const combinedParameters = combineParameters(\n    globalConfig.parameters || {},\n    meta.parameters || {},\n    story.parameters || {}\n  )\n\n  const combinedArgs = { \n    ...meta.args,\n    ...story.args\n  }\n\n  const composedStory = (extraArgs: Record<string, any>) => {\n    const config = {\n      id: '',\n      kind: '',\n      name: '',\n      argTypes: globalConfig.argTypes || {},\n      globals: defaultGlobals,\n      parameters: combinedParameters,\n      args: {\n        ...combinedArgs,\n        ...extraArgs,\n      },\n    }\n\n    return decorated(config)\n  }\n  \n  composedStory.args = combinedArgs\n  composedStory.decorators = combinedDecorators\n  composedStory.parameters = combinedParameters\n\n  return composedStory as Story<Partial<GenericArgs>>;\n}\n\n/**\n * Function that will receive a stories import (e.g. `import * as stories from './Button.stories'`)\n * and optionally a globalConfig (e.g. `import * from '../.storybook/preview`)\n * and will return an object containing all the stories passed, but now as a composed component that has all args/parameters/decorators/etc combined and applied to it.\n *\n *\n * It's very useful for reusing stories in scenarios outside of Storybook like unit testing.\n *\n * Example:\n *```jsx\n * import { render } from '@testing-library/react';\n * import { composeStories } from '@storybook/testing-react';\n * import * as stories from './Button.stories';\n *\n * const { Primary, Secondary } = composeStories(stories);\n *\n * test('renders primary button with Hello World', () => {\n *   const { getByText } = render(<Primary>Hello world</Primary>);\n *   expect(getByText(/Hello world/i)).not.toBeNull();\n * });\n *```\n *\n * @param storiesImport - e.g. (import * as stories from './Button.stories')\n * @param [globalConfig] - e.g. (import * as globalConfig from '../.storybook/preview') this can be applied automatically if you use `setGlobalConfig` in your setup files.\n */\nexport function composeStories<\n  T extends { default: Meta, __esModule?: boolean }\n>(storiesImport: T, globalConfig?: GlobalConfig) {\n  const { default: meta, __esModule, ...stories } = storiesImport;\n\n  // Compose an object containing all processed stories passed as parameters\n  const composedStories = Object.entries(stories).reduce(\n    (storiesMap, [key, story]) => {\n      storiesMap[key] = composeStory(story as Story, meta, globalConfig);\n      return storiesMap;\n    },\n    {} as { [key: string]: Story }\n  );\n\n  return composedStories as StoriesWithPartialProps<T>;\n}\n"],"names":["setChannel","mockChannel","globalStorybookConfig","composeStory","story","meta","globalConfig","Error","undefined","combinedDecorators","decorators","decorated","defaultDecorateStory","context","parameters","passArgsFirst","args","defaultGlobals","Object","entries","globalTypes","reduce","acc","defaultValue","combinedParameters","combineParameters","combinedArgs","composedStory","extraArgs","config","id","kind","name","argTypes","globals","storiesImport","stories","storiesMap"],"mappings":"kZAOOA,WAAWC,iBAElB,IAAIC,EAAwB,YA+CZC,EACdC,EACAC,EACAC,qBAAAA,IAAAA,EAA6BJ,GAER,mBAAVE,QACH,IAAIG,sHACwGH,uBAIxFI,IAAxBJ,EAAcA,YACV,IAAIG,2NAgBNE,YACAL,EAAMM,YAAc,UACpBL,SAAAA,EAAMK,aAAc,aACpBJ,YAAcI,aAAc,IAG5BC,EAAYC,wBAhBG,SAACC,SACaA,EAAQC,WAAjCC,sCAEA,IAAIR,MACR,2FAGGH,EAAMS,EAAQG,KAAqBH,KAW1CJ,GAGIQ,EAAiBC,OAAOC,QAC3Bb,EAAac,aAAe,IAC7BC,QAAO,SAACC,SAAaC,OAAAA,oBACjBA,IACFD,QAAWC,GAEND,IACN,IAEGE,EAAqBC,oBACzBnB,EAAaQ,YAAc,GAC3BT,EAAKS,YAAc,GACnBV,EAAMU,YAAc,IAGhBY,OACDrB,EAAKW,KACLZ,EAAMY,MAGLW,EAAgB,SAACC,OACfC,EAAS,CACbC,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,SAAU3B,EAAa2B,UAAY,GACnCC,QAASjB,EACTH,WAAYU,EACZR,UACKU,EACAE,WAIAjB,EAAUkB,WAGnBF,EAAcX,KAAOU,EACrBC,EAAcjB,WAAaD,EAC3BkB,EAAcb,WAAaU,EAEpBG,kCA8BPQ,EAAkB7B,OACDD,EAAiC8B,UAAZC,qIAAYD,mCAG1BjB,OAAOC,QAAQiB,GAASf,QAC9C,SAACgB,YACCA,QAAkBlC,OAA6BE,EAAMC,GAC9C+B,IAET,6DArJ4BR,GAC9B3B,EAAwB2B"}